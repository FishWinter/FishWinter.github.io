<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>根文件系统</title>
    <url>//posts/f74877aa.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 27 2019 18:30:13 GMT+0800 (GMT+08:00) --><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><a id="more"></a><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><ol><li>修改makefile<br>打开busybox顶层的makefile<br>修改ARCH和CROSS_COMPILE<br>CROSS_COMPILE ?= /usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-<br>ARCH ?= a</li><li>配置busybox<br>defconfig 默认配置<br>allyesconfig 全选配置<br>allnoconfig 最小配置<br>例如:make defconfig 开始配置<br>图形化配置界面 make menuconfig</li><li>编译busybox<br>将其存放到rootfs中<br>make install CONFIG_PREFIX=/home/zuozhongkai/linux/nfs/rootfs</li><li>一堆文件复制粘贴</li><li>创建其他文件夹<br>dev proc mnt sys tmp root<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></li></ol><ul><li></li><li></li><li></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>busybox中文支持有点问题</li><li>nfs/rootfs 是用来当网络文件夹用的</li><li></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>i.mx6ull</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>U-Boot-logo</title>
    <url>//posts/134b0db4.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 27 2019 18:30:13 GMT+0800 (GMT+08:00) --><p>学习正点原子的linux</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用正点原子的的uboot时,print一下,忽然发现logo_file=alientek.bmp.恩?我有了一个大胆的想法</p><a id="more"></a><p>修改uboot的载入界面,换成自己设定的</p><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>应该是logo_file决定哪个图片为载入界面<br>find查找一下alientek.bmp,在tools/logos里,里面图片还挺多.都是.bmp结尾的<br>打开看看,尺寸好像跟显示屏对不上,enmmm应该是内部将其扩大了放在屏幕上.<br>网上百度一个图片,下载来,修改一下格式,放到tools/logos里,<br>重新编译一下uboot,下载到开发板里,修改环境变量,setenv和saveenv.重启.<br>恩?加载界面没变?print一下 的确已经修改了.这是怎么回事</p><p>仔细查询发现之前修改u-boot时没有保存,u-boot依旧是以前的.<br>重新下载,花屏无法显示图片,有模糊的样子.将logo_file改为原来依旧无法显示.<br>判断u-boot里只有一个logo文件<br>经百度 <a href="https://blog.csdn.net/kunkliu/article/details/81126763" target="_blank" rel="noopener">https://blog.csdn.net/kunkliu/article/details/81126763</a><br>应该是图片过大,图片格式不对,需要8位色.<br>使用Netpbm修改图片<br>执行命令：sudo apt-get install netpbm 即可安装<br>编写脚本<br>#!/bin/sh<br>#install Netpbm first<br>jpegtopnm $1 | ppmquant 31 | ppmtobmp -bpp 8 &gt; $2<br>使用方法： （脚本名） （ 待处理的JPG图片名） （输出文件名）<br>注意的是原文件得用jpg 不然会报错 输出文件可以用.bmp enmmm<br>重新修改364*128图片大小,8位色.成功显示.</p><p>修改logo加载图片,print里的logo_file只是告诉你用的是什么图片,修改无作用<br>主要依靠tools/Makefile文件 210行<br>ifneq ($(wildcard $(srctree)/$(src)/logos/$(VENDOR).bmp),)<br>#LOGO_BMP= $(srctree)/$(src)/logos/$(VENDOR).bmp<br>LOGO_BMP= $(srctree)/$(src)/logos/alientek.bmp<br>endif<br>修改alientek.bmp即可</p><p>再次尝试修改图片大小,只要图片小于屏幕尺寸就能显示</p><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><ol><li>前期准备<br>安装netpbm<br>执行命令：sudo apt-get install netpbm<br>编写脚本<br>#!/bin/sh<br>#install Netpbm first<pre><code>jpegtopnm $1 | ppmquant 31 | ppmtobmp -bpp 8 &gt; $2</code></pre>使用方法： （脚本名） （ 待处理的JPG图片名） （输出文件名）<br>./脚本名 图片.jpg 图片.bmp</li><li>修改logo位置<br>打开tools/Makefile文件,查找LOGO_BMP= $(srctree)/$(src)/logos<br>修改alientek.bmp</li><li>下载<br>保存,重新编译,下载</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>前面疯狂尝试,找到了位置,但是主要是图片的格式这一块没有搞定必须是8位色,不然会显示一堆奇怪的东西</li><li>一个小小的问题就能困扰好久,看来还是百度来的快,有人指点那就更好了</li><li>想不出来时,换个时间在做就能轻轻松松做出来</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>使用Netpbm时,脚本文件只能处理jpg</li><li>图片大于屏幕时只会显示一部分</li><li>小心SD卡,特别是冬天,容易坏</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>i.mx6ull</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>linux内核移植</title>
    <url>//posts/a2d3bee2.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 27 2019 18:30:13 GMT+0800 (GMT+08:00) --><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><a id="more"></a><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><ol><li></li><li></li><li></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li></li><li></li><li></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li></li><li></li><li></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>i.mx6ull</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>博客i.mx6ull文章模板</title>
    <url>//posts/2acac841.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 27 2019 18:30:13 GMT+0800 (GMT+08:00) --><p>为了使自己的文章写的简洁易懂,笔记做的更好,日后复习好用,特地规范一下</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><p>1.<br>2.<br>3.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li></li><li></li><li></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li></li><li></li><li></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>规范</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>pinctrl和gpio子系统</title>
    <url>//posts/a80ca934.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 27 2019 18:30:13 GMT+0800 (GMT+08:00) --><p>读正点原子所做的笔记</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>pinctrl子系统负责配置IO管脚各种功能<br>gpio子系统负责GPIO输入和输出</p><a id="more"></a><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>设备树里的节点iomuxc<br>在imx6ull-alientek-emmc.dts文件里</p><pre><code>&amp;iomuxc{ 
imx6ul=evk{ 
    pinctrl_hog_1: xxx{ 
        fsl,pins = &lt;  
            MX6UL_PAD_UART1_RTS_B__GPIO1_IO19      0x17059
        &gt;;  
        }  
    }  
} </code></pre><p>“MX6UL_PAD_UART1_RTS_B__GPIO1_IO19 0x17059”这就是配置pin的代码<br>MX6UL_PAD_UART1_RTS_B__GPIO1_IO19的宏定义在imx6ul-pinfunc.h<br>这里面有8个以MX6UL_PAD_UART1_RTS_B开头的宏定义</p><pre><code>#define MX6UL_PAD_UART1_RTS_B__GPIO1_IO19 0x0090 0x031C 0x0000 0x5 0x0</code></pre><p>分别对应UART1_RTS_B这个pin的8个复用IO</p><p>对应的5个值<br><mux_reg conf_reg input_reg mux_mode input_val></mux_reg></p><p>IOMUXC外设寄存器起始地址为0x020e0000,0x020e0000+0x0090=IOMUXC_SW_MUX_CTL_PAD_UART1_RTS_B的寄存器地址0x020e0090.在&lt;&lt;IMX6ULL参考手册&gt;&gt;中可以查到.</p><p>0x0090 : mux_reg寄存器偏移地址复用寄存器<br>0x031c : conf_reg寄存器偏移地址,配置上拉下拉输入输出模式<br>0x0000 : input_reg寄存器偏移地址,有的话需要配置,没有的话就不需要<br>0x5 : mux_reg寄存器值,复用为GPIO1_IO19<br>0x0 : input_reg寄存器值<br>input_reg寄存器的值不在宏定义里,在设备树里.</p><p>同一个外设的PIN都放到一个节点里.节点前缀一定要为”pinctrl_”<br>添加”fsl,pins”属性<br>在”fsl,pins”属性中添加pin配置信息</p><p>gpio子系统API函数<br>gpio_request函数,申请一个GPIO管脚<br>gpio_free函数,释放一个GPIO管脚<br>gpio_direction_input函数,设置GPIO管脚为输入<br>gpio_direction_output函数,设置GPIO管脚为输出<br>gpio_get_value函数,获取GPIO的值<br>gpio_set_value函数,设置某个GPIO的值</p><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><ol><li>修改设备树文件<ol><li>添加pinctrl节点<br>LED使用了GPIO1_IO03引脚,打开imx6ull-alientek-emmc.dts,在iomuxc节点的imx6ul-evk子节点下创建一个名为”pinctrl_led”的子节点</li><li>添加LED设备节点</li><li>检查PIN是否被其他外设使用</li></ol></li><li>LED灯驱动程序编写</li><li>编写测试APP</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li></li><li></li><li></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>在实际操作时,第一步就挂了,找到imx6ull-alientek-emmc.dts,但是没有这个文件,正点原子这一章也没有说在哪,猜测应该前面有讲,全局搜索了一下pdf文件,果然在内核移植这一块找到,可是我这个linux内核文件明明白白写着是修改过的,难道搞错了.再次验证了一下,没有错.可能是什么地方错了?既然没有就按照内核移植的写一遍</li><li></li><li></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>i.mx6ull</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>设备树led驱动</title>
    <url>//posts/aef9bc19.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 27 2019 18:30:13 GMT+0800 (GMT+08:00) --><p>读正点原子所做的笔记</p><a id="more"></a><p>本章的重点内容为:<br>创建设备节点,往里写入寄存器的地址<br>编写驱动程序,其中的驱动初始化里调用OF函数读取设备树里的地址完成初始化</p><p>alphaled<br>#address-cells = &lt;1&gt;;<br>#size-cells = &lt;1&gt;;<br>compatible = “atkalpha-led”;<br>status = “okay”;<br>reg = &lt; 0X020C406C 0X04<br>0X020E0068 0X04 &gt;;</p><p>make dtbs 编译设备树</p><p>/* 获取设备节点: alphaled <em>/<br>dtsled.nd = of_find_node_by_path(“/alphaled”);<br>/</em> 获取compatible属性内容 <em>/<br>proper = of_find_property(dtsled.nd, “compatible”, NULL);<br>/</em> 获取status属性内容 <em>/<br>ret = of_property_read_string(dtsled.nd, “status”, &amp;str)<br>/</em> 获取reg属性内容 */<br>ret = of_property_read_u32_array(dtsled.nd, “reg”, regdata, 10);</p><p>后面的pinctrl和gpio子系统比现在用这个写方便多了</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>i.mx6ull</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>linux设备树</title>
    <url>//posts/f69a9274.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 27 2019 18:30:13 GMT+0800 (GMT+08:00) --><p>读正点原子的设备树笔记</p><a id="more"></a><p>新版本linux中,arm相关的设备全部采用了设备树,很明显设备树非常重要</p><p>描述设备树的文件DTS(device tree source)还真是驱动 树 文件<br>一个描述soc的文件.dtsi<br>一个同样soc的不同板子的文件.dts</p><p>DTS编译后的二进制文件DTB,需要DTC工具编译<br>DTC存在linux内核的scripts/dtc目录下<br>编译设备树命令 make dtbs ,enmmm 直接编译这个soc下的所有板子的设备树文件dts</p><p>设备树dts里的 #include可以包含.h .dtsi .dts 但最好是.dtsi<br>.dtsi文件描述soc内部外设信息,比如CPU架构,主频,外设寄存器地址范围</p><p>设备节点<br>node-name@unit-address<br>node-name是节点名字,unit-adress表示设备的地址或寄存器首地址<br>unit-adress可以不要,为0<br>label:node-name@unit-address<br>可以直接通过label来访问这个节点,而不需要完整的节点名称<br>每个节点都有不同属性,不同属性又有不同内容,属性都是键值对,值可以为空或任意的字节流<br>字符串 compatible = “arm,cortex-a7”;<br>32位无符号整数 reg = &lt;0&gt;;也可以设为一组值 reg = &lt;0 123 0x123&gt;<br>字符串列表<br>compatible = “fsl,asd”,”fsl,dsa” 字符串之间用”,”分割</p><p>标准属性<br>compatible属性(兼容性属性)非常重要,字符串列表<br>用于将设备和驱动绑定<br>格式为”manufacturer,model”<br>manufacturer表示厂商, mode模块对应的驱动名字<br>驱动程序文件一般有一个OF匹配表,此表中保存着一些compatible值,如果设备的compatible属性值和OF匹配表中的任何一个值相等,那么就表示设备可以使用这个驱动</p><p>model属性<br>字符串,一般描述设备模块信息,比如名字什么</p><p>status属性<br>字符串,和设备状态有关<br>“okay”表明设备是可操作的<br>“disabled”表明当前是不可操作的,但以后可能为可操作的,比如热插拔设备<br>“fail”表面是不可操作的,有错误的<br>“fail-sss”和fail相同,sss是检测到的错误内容</p><p>“#address-cells和#size-cells属性”<br>这两个属性的值都是无符号32为整形,可以用在任何拥有子节点的设备中,用于描述子节点的地址信息<br>“#address-cells”决定子节点reg属性中地址信息所占用的字长,#size-cells决定长度信息所占的字长<br>reg=<address1 length1 address2 length2><br>‘#adress-cells表明address这个数据所占用的字长,#size-cells表明length这个数据所占用的字长</address1></p><p>reg属性<br>(address,length)</p><p>ranges属性<br>可以为空<br>子地址,父地址和地址空间长度,但是i.mx6ull子地址和父地址一样</p><p>name属性<br>记录节点名字,已启用</p><p>device_type属性<br>用于描述FCode?,只能用于cpu节点或者memory节点</p><p>OF操作函数</p><p>查找节点的OF函数,有5个<br>of_find_node_by_name函数通过节点名字查找指定的节点<br>of_find_node_by_type函数通过device_type属性查找指定的节点<br>of_find_compatible_node函数通过device_type和compatible两个属性查找<br>of_find_matching_node_and_match函数通过of_device_id匹配表查找<br>of_find_node_by_path函数通过路径来查找</p><p>查找父/子节点的OF函数<br>of_get_parent函数用来获取指定节点的父节点<br>of_get_next_child函数用迭代查找子节点</p><p>提取属性值的OF函数<br>of_find_property函数用于查找指定的数据<br>of_property_count_elems_of_size函数可以获取属性中元素的数量???<br>of_property_read_u32_index函数用于从属性中获取指定标号的u32类型数据值<br>这种函数或者使用用法可以从哪里获知呢?有什么东西储存这些吗?总不能一个一个去百度查吧</p><p>无法总结……….似懂非懂</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>i.mx6ull</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>写博客感受</title>
    <url>//posts/65068efb.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 27 2019 18:30:13 GMT+0800 (GMT+08:00) --><p>写博客的感觉</p><a id="more"></a><p>刚修改了一下我写的第一篇博客,发现许多的不足之处.<br>文章写的很混乱,没有什么人会看这种,我自己也不会看,就没有什么复习的效果.<br>第一篇写完,还是有点感受,先写总结,在把总结里内容反着写出来.我觉得可以,下次试试.这博客更像是给我练习我打字速度的?和巩固我的知识,坚持写很难.总会有事,但未来时间会更少,还是珍惜一下眼前的时间的吧.下次有感的时候可以在写一篇感受.不错.</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>新字符设备驱动实验</title>
    <url>//posts/3298061745.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 27 2019 18:30:13 GMT+0800 (GMT+08:00) --><p>读正点原子所做的笔记</p><a id="more"></a><h1 id="创建-申请-设备号-alloc-chrdev-region"><a href="#创建-申请-设备号-alloc-chrdev-region" class="headerlink" title="创建(申请)设备号(alloc_chrdev_region)"></a>创建(申请)设备号(alloc_chrdev_region)</h1><p>alloc_chrdev_region(&amp;dev_t,0,1,”test”)<br>申请设备号<br>我觉得这个比较常用<br>从0开始申请1个关于test的设备号<br>设备号保存在devid中</p><p>unregister_chrdev_region(dev_t, 1)<br>注销设备号<br>注销devid设备1个<br>这里有疑问,如果有3个次设备号呢,怎么确定注销哪一个?</p><h1 id="初始化cdev-cdev-init"><a href="#初始化cdev-cdev-init" class="headerlink" title="初始化cdev(cdev_init)"></a>初始化cdev(cdev_init)</h1><p>定义cdev结构体<br>在include/linux/cdev.h这里面比较重要的是两个变量<br>const struct file_operations *ops 包含设备文件操作函数<br>dev_t 包含设备号</p><p>cdev_init(struct cdev *cdev,const struct file_operation *fops)<br>初始化cdev<br>第一个选项为未初始化的cdev<br>第二个选项为设备操作函数<br>设备操作函数定义 static struct file_operations test_fops = {<br>.owner = THIS_MODULE<br>}<br>testcdev.owner = THIS_MODULE</p><h1 id="添加一个cdev-cdev-add"><a href="#添加一个cdev-cdev-add" class="headerlink" title="添加一个cdev(cdev_add)"></a>添加一个cdev(cdev_add)</h1><p>cdev_add(struct cdev *p,dev_t dev,unsigned count)<br>用于向linux系统添加字符设备<br>cdev_add(&amp;cdev, dev_t, 1)</p><p>cdev包含dev_t, file_operations</p><p>cdev_del(&amp;cdev)<br>删除cdev<br>和unregister_chrdev_region(dev_t, 1)注销设备号一起使用,那么建立也是一起cdev和alloc_chrdev_region</p><h1 id="创建类-class-create"><a href="#创建类-class-create" class="headerlink" title="创建类(class_create)"></a>创建类(class_create)</h1><p>前面是自动获取设备号之后是自动创建设备节点<br>设备节点在/dev下.linux下是udev自动建立删除设备节点文件.用busybox构建的根文件系统中用的是简化版本mdev.插拔事件也是mdev管理<br>struct class class_create(struct module *owner, const char *name)<br>创建类<br>第一个参数为owner 一般为THIS_MODULE THIS_MODULE是什么?<br>第二个为类名字<br>返回值是指向结构体class的指针</p><p>void class_destroy(struct class *cls)<br>删除类</p><h1 id="创建设备-device-create"><a href="#创建设备-device-create" class="headerlink" title="创建设备(device_create)"></a>创建设备(device_create)</h1><p>struct device *device_create( struct class *class<br>struct device *parent<br>dev_t devt<br>void *drvdata<br>const char *fmt,…)<br>创建设备,返回指向设备的指针<br>第一个为类<br>第二个parent为父参数,一般为NULL<br>第三个devt是设备号<br>第四个设备可能会使用的数据,一般为NULL<br>第五个设备名字</p><p>void device_destroy(struct *class, dev_t devt)<br>删除设备</p><p>类和设备,先创建类在在类里创建设备,他们放在驱动入口函数</p><p>设置文件私有数据的时候用结构体表示更好</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>先创建一个结构体,存放私有数据包括(设备号devid, cdev, 类<em>class, 设备</em>device, 主设备号major, 次设备号minor)<br>在初始化函数中<br>先创建(申请)设备号(alloc_chrdev_region)<br>初始化cdev(cdev_init)<br>添加一个cdev(cdev_add)<br>创建类(class_create)<br>创建设备(device_create)</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>i.mx6ull</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
</search>
